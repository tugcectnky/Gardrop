! index.html, login.html and log.py coded to learn, not for practical solution. 


An intelligent wardrobe application where users can create their own virtual gardroplines and get combinatorial recommendations on the application, plus access to the statistics of the garments they use and do not use.

1.) Create user

a.) User information to be kept in the database [e-mail, password, name, user-id] b.) Log-in [login with e-mail and password]

2.) Uploading and saving photos (by features)

a.) Uploading Photos [Interface]: Importing and adding photos with camera, selecting from gallery. These attachments will be made by selecting the properties from the drop-down menu. These items in the drop-down menu will be selected statically in the interface. [Backend-API: Site name / photo]: The function related to the photo loading event will be written in the form of color, fabric, season, concept, climate, genre (underwear, topwear, outerwear, This function will be taken as a parameter: see [Flask File Upload]): Userid, color, fabric, season, concept, type, weather, photo. These parameters will be saved in the table of clothing in the database. During the save, automatic clothes will also be created (mysql auto increment)

Photo upload with QRCode: The features listed above will be in the square, the phone will convert it to a date and send it via API.

3.) Like the Combine

Will choose the concept and according to this concept other information will be automatically selected and suggested. Weather and season will be automatically received at backend, so you will get one from the species at once and combine them. These combos will be displayed as sliders in the interface. a.) Interface Concepts will be displayed in the form of icons. The screen will be divided into pieces and will write concepts in the form of icons. The user will select one (when the user selects one of the concepts, send the concept name to the backend in the form of the site name / combination combination), then go to the combine page. On the combine page, there will be a combination on each page and page transitions will be made as a slider. In this way the combos will be listed.

b.) The function that proposes the combination according to the combination id from the backend sitename / combinationinfo combination name will work. This function will send a list of the combined id, altgiyimid, ustgiyimid, disgiyimid, ayakkabiid, and tekparcid properties as a JSON list.

-Working logic of this function: At first, a variable will be recorded using python libraries for weather and seasonal information. These variables (havadurumuid, seasonid, conceptid) will be suggested in the WHERE part of the sql query which will give suggestions. -Working logic of this query: In the beginning, the WHERE command will filter the data of the concept, weather and season table according to the dress code. Then we will create the columns for each type with the clothes, color, type, fabric data, rank function we have obtained. In this case, you'll have to get genids, clothes, colors, fabric. The algorithm will be derived according to the relationship between fabric and color properties. As a result, the combination of idiosis, altgimide, supergymide, dysgiumide, shakebird, tekparcaid output will be.

4.) LIKE (selection) Below the combination suggestions presented in the interface, the button will be selected. This button will select the selected combination. If you click this button, the combination of the current combination (kombin id, altgimid, ustgiyimid, userid in the favorites table, the weather forecast, the season, the concept (backend) data. This information will be used on the history page.

5.) HISTORY - DONATE Site name / history will be given in the table of likes. After the liking process, clothes that are not in the favorites tab will be listed on the new page under the name of donate. -Backend: sitename / bagisla api will be given as a parameter to the function at the price.
